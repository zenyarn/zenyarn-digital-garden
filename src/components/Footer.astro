---
import { convert as htmlToText } from "html-to-text";
import calculateReadingTime from "reading-time";

import { useI18n } from "../i18n/utils";
import type { DocumentContext } from "../types";

export type Props = {
  document?: DocumentContext;
};

const { document } = Astro.props;

const { t } = useI18n(Astro);

const formatDuration = (ms: number): string => {
  if (ms < 0) ms = -ms;
  const time = {
    day: Math.floor(ms / 86400000),
    hour: Math.floor(ms / 3600000) % 24,
    minute: Math.floor(ms / 60000) % 60,
    second: Math.floor(ms / 1000) % 60,
    millisecond: Math.floor(ms) % 1000
  };
  return Object.entries(time)
    .filter(val => val[1] !== 0)
    .map(([key, val]) => {
      const tkey = `${key}${val !== 1 ? 's' : ''}`;

      return t(`format.${tkey}` as any, { [tkey]: val.toString() })
    })[0]
    // .join(', ');
};

const text = htmlToText(document?.rendered?.html as string);

const readingTime = formatDuration(calculateReadingTime(text).time)
// const words = text.split(" ").filter(t => t.length > 0).length.toString();
// const characters = text.length.toString();
---

{document?.rendered && (
  <footer
    class="fixed z-40 border text-footer-foreground dark:text-footer-foreground-dark border-footer-border dark:border-footer-border-dark bottom-0 right-0 bg-footer-background dark:bg-footer-background-dark rounded-tl-xl px-2 py-2 flex gap-2 font-menu shadow-2xl "
  >
    <p>
      {t('footer.readingTime', { readingTime })}
    </p>
    {/* <p>
      {t('footer.wordsCount', { words })}
    </p>
    <p>
      {t('footer.charactersCount', { characters })}
    </p> */}
  </footer>
)}